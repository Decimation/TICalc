; Zilog eZ80 ANSI C Compiler Release 3.4
; -debug -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\LIBRARY.C"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "__stdio_file",1
.DEFINE "slot"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "__stdio_file"
.BEGREC "NONAME3",9
.DEFINE "sign"
.VALUE 0
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "mant"
.VALUE 2
.CLASS 8
.DIM 7
.TYPE 108
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",18
.DEFINE "real"
.VALUE 0
.CLASS 8
.TAG "NONAME3"
.TYPE 8
.ENDEF
.DEFINE "imag"
.VALUE 9
.CLASS 8
.TAG "NONAME3"
.TYPE 8
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",11
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME3"
.TYPE 104
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",20
.DEFINE "dim"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME4"
.TYPE 104
.ENDEF
.ENDREC "NONAME6"
.BEGREC "NONAME7",11
.DEFINE "cols"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rows"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "items"
.VALUE 2
.CLASS 8
.DIM 1
.TAG "NONAME3"
.TYPE 104
.ENDEF
.ENDREC "NONAME7"
.BEGREC "NONAME8",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME8"
.BEGREC "NONAME9",3
.DEFINE "len"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 98
.ENDEF
.ENDREC "NONAME9"
.BEGREC "NONAME10",3
.DEFINE "size"
.VALUE 0
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "data"
.VALUE 2
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.ENDREC "NONAME10"
	SEGMENT BSS
_g_response:
	DS	20
.DEFINE "g_response"
.ALIAS "_g_response"
.CLASS 83
.VALUE _g_response
.DIM 20
.TYPE 98
.ENDEF
_g_inputBuffer:
	DS	10
.DEFINE "g_inputBuffer"
.ALIAS "_g_inputBuffer"
.CLASS 83
.VALUE _g_inputBuffer
.DIM 10
.TYPE 98
.ENDEF
;    1	/* Keep these headers */
;    2	
;    3	#include <math.h>
;    4	#include "C:\CEdev\include\stddef.h"
;    5	#include "C:\CEdev\include\stdbool.h"
;    6	#include "C:\CEdev\include\fileioc.h"
;    7	#include "Library.h"
;    8	#include "IO.h"
;    9	
;   10	
;   11	/**
;   12	 * THESE MUST BE GLOBAL OR ELSE EXITING
;   13	 * THE ENTRY POINT WILL CAUSE AN NMI RESET
;   14	 */
;   15	char g_response[RESP_SIZE];
;   16	char g_inputBuffer[INPUT_SIZE];
	SEGMENT CODE
;   17	//int24_t g_value;
;   18	
;   19	
;   20	void sys_GarbageCollect()
;   21	{
_sys_GarbageCollect:
.DEFINE "_sys_GarbageCollect"

.VALUE _sys_GarbageCollect

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "sys_GarbageCollect",21,"_sys_GarbageCollect"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   22		dbg_sprintf(dbgout, "[DECIMATH] Freeing pointers\n");
.LINE 22

	LD	BC,L__0
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;   23		free(g_X);
.LINE 23

	LD	BC,(_g_X)
	PUSH	BC
	CALL	_free
	POP	BC
;   24		dbg_sprintf(dbgout, "[DECIMATH] Unloaded\n");
.LINE 24

	LD	BC,L__1
	PUSH	BC
	LD	BC,16449536
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
;   25		os_ClrHome();
.LINE 25

	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;   26	}
.LINE 26

	LD	SP,IX
	POP	IX
	RET	


;**************************** _sys_GarbageCollect ***************************
;Name                         Addr/Register   Size   Type
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;_g_X                                IMPORT      3   variable
;_free                               IMPORT  -----   function
;_sprintf                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "sys_GarbageCollect",26,"_sys_GarbageCollect"
	SEGMENT STRSECT
L__0:
	DB	"[DECIMATH] Freeing pointers"
	DB	10,0
L__1:
	DB	"[DECIMATH] Unloaded"
	DB	10,0
	SEGMENT CODE
;   27	
;   28	void EchoInput(int i)
;   29	{
_EchoInput:
.DEFINE "_EchoInput"

.VALUE _EchoInput

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "EchoInput",29,"_EchoInput"

.LINE 29

.DEFINE "i"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   30		//sprintf(g_response, "(%d)", i);
;   31		//io_print(g_response, 15, 0);
;   32	}
.LINE 32

	LD	SP,IX
	POP	IX
	RET	


;**************************** _EchoInput ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "EchoInput",32,"_EchoInput"
;   33	
;   34	void Substring(char* in, int index, int len, char* out)
;   35	{
_Substring:
.DEFINE "_Substring"

.VALUE _Substring

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "Substring",35,"_Substring"

.LINE 35

.DEFINE "in"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "index"

.CLASS 65

.VALUE 9

.TYPE 4

.ENDEF

.DEFINE "len"

.CLASS 65

.VALUE 12

.TYPE 4

.ENDEF

.DEFINE "out"

.CLASS 65

.VALUE 15

.TYPE 34

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   36	
;   37		memcpy(out, &in[index], len + 1);
.LINE 37

	LD	BC,(IX+12)
	INC	BC
	PUSH	BC
	LD	BC,(IX+9)
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;   38		out[len] = '\0';
.LINE 38

	LD	BC,(IX+12)
	LD	HL,(IX+15)
	ADD	HL,BC
	LD	(HL),0
;   39	}
.LINE 39

	LD	SP,IX
	POP	IX
	RET	


;**************************** _Substring ***************************
;Name                         Addr/Register   Size   Type
;_memcpy                             IMPORT  -----   function
;out                                  IX+15      3   parameter
;len                                  IX+12      3   parameter
;index                                 IX+9      3   parameter
;in                                    IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "Substring",39,"_Substring"
;   40	
;   41	void Prepend(char* s, const char* t)
;   42	{
_Prepend:
.DEFINE "_Prepend"

.VALUE _Prepend

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "Prepend",42,"_Prepend"

.LINE 42

.DEFINE "s"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "t"

.CLASS 65

.VALUE 9

.TYPE 194

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

.DEFINE "len"

.CLASS 65

.VALUE -6

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
;   43		size_t len = strlen(t);
.LINE 43

	LD	BC,(IX+9)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-6),HL
;   44		size_t i;
;   45	
;   46		memmove(s + len, s, strlen(s) + 1);
.LINE 46

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	INC	HL
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
;   47	
;   48		for (i = 0; i < len; ++i)
.LINE 48

	LD	BC,0
	LD	(IX+-3),BC
	JR	L_7
L_5:
;   49		{
;   50			s[i] = t[i];
.LINE 50

	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   51		}
L_7:
.LINE 51

	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_5
;   52	}
.LINE 52

	LD	SP,IX
	POP	IX
	RET	


;**************************** _Prepend ***************************
;Name                         Addr/Register   Size   Type
;_memmove                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;len                                   IX-6      3   variable
;i                                     IX-3      3   variable
;t                                     IX+9      3   parameter
;s                                     IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "Prepend",52,"_Prepend"
;   53	
;   54	int IndexOf(char* values, char find)
;   55	{
_IndexOf:
.DEFINE "_IndexOf"

.VALUE _IndexOf

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "IndexOf",55,"_IndexOf"

.LINE 55

.DEFINE "values"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "find"

.CLASS 65

.VALUE 9

.TYPE 2

.ENDEF

.DEFINE "index"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "ptr"

.CLASS 65

.VALUE -6

.TYPE 194

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
;   56		int index;
;   57		const char* ptr = strchr(values, find);
.LINE 57

	LD	A,(IX+9)
	SEXT	HL
	LD	L,(IX+9)
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strchr
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;   58		if (ptr)
.LINE 58

	CALL	__icmpzero
	JR	Z,L_10
;   59		{
;   60			index = (int) (ptr - values);
.LINE 60

	LD	BC,(IX+6)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
;   61		}
;   62		else index = -1;
.LINE 62

	JR	L_11
L_10:
	LD	BC,16777215
	LD	(IX+-3),BC
L_11:
;   63		return index;
.LINE 63

	LD	HL,(IX+-3)
;   64	}
.LINE 64

	LD	SP,IX
	POP	IX
	RET	


;**************************** _IndexOf ***************************
;Name                         Addr/Register   Size   Type
;_strchr                             IMPORT  -----   function
;ptr                                   IX-6      3   variable
;index                                 IX-3      3   variable
;find                                  IX+9      1   parameter
;values                                IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "IndexOf",64,"_IndexOf"
;   65	
;   66	int StrCut(char* str, int begin, int len)
;   67	{
_StrCut:
.DEFINE "_StrCut"

.VALUE _StrCut

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "StrCut",67,"_StrCut"

.LINE 67

.DEFINE "str"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "begin"

.CLASS 65

.VALUE 9

.TYPE 4

.ENDEF

.DEFINE "len"

.CLASS 65

.VALUE 12

.TYPE 4

.ENDEF

.DEFINE "l"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
;   68		int l = strlen(str);
.LINE 68

	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-3),HL
;   69	
;   70		if (len < 0) len         = l - begin;
.LINE 70

	LD	HL,(IX+12)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_15
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_15:
;   71		if (begin + len > l) len = l - begin;
.LINE 71

	LD	BC,(IX+12)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_16
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_16:
;   72		memmove(str + begin, str + begin + len, l - len + 1);
.LINE 72

	LD	BC,(IX+9)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	INC	HL
	PUSH	HL
	LD	BC,(IX+12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
;   73	
;   74		return len;
.LINE 74

	LD	HL,(IX+12)
;   75	}
.LINE 75

	LD	SP,IX
	POP	IX
	RET	


;**************************** _StrCut ***************************
;Name                         Addr/Register   Size   Type
;_memmove                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;l                                     IX-3      3   variable
;len                                  IX+12      3   parameter
;begin                                 IX+9      3   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "StrCut",75,"_StrCut"
;   76	
;   77	int IsEven(double d)
;   78	{
_IsEven:
.DEFINE "_IsEven"

.VALUE _IsEven

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "IsEven",78,"_IsEven"

.LINE 78

.DEFINE "d"

.CLASS 65

.VALUE 6

.TYPE 6

.ENDEF

.DEFINE "int_part"

.CLASS 65

.VALUE -4

.TYPE 6

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;   79		double int_part;
;   80		modf(d / 2.0, &int_part);
.LINE 80

	PEA	IX+-4
	OR	A,A
	SBC	HL,HL
	LD	E,64
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_modf
	POP	BC
	POP	BC
	POP	BC
;   81		return 2.0 * int_part == d;
.LINE 81

	OR	A,A
	SBC	HL,HL
	LD	E,64
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JR	NZ,L__13
	LD	B,1
	JR	L__14
L__13:
	LD	B,0
L__14:
	LD	A,B
	SEXT	HL
	LD	L,B
;   82	}
.LINE 82

	LD	SP,IX
	POP	IX
	RET	


;**************************** _IsEven ***************************
;Name                         Addr/Register   Size   Type
;_modf                               IMPORT  -----   function
;int_part                              IX-4      4   variable
;d                                     IX+6      4   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "IsEven",82,"_IsEven"
;   83	
;   84	double RoundIEEE754(double d)
;   85	{
_RoundIEEE754:
.DEFINE "_RoundIEEE754"

.VALUE _RoundIEEE754

.CLASS 2

.TYPE 70

.ENDEF

.BEGFUNC "RoundIEEE754",85,"_RoundIEEE754"

.LINE 85

.DEFINE "d"

.CLASS 65

.VALUE 6

.TYPE 6

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -4

.TYPE 6

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;   86		double i = floor(d);
.LINE 86

	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_floor
	POP	BC
	POP	BC
	LD	(IX+-4),HL
	LD	(IX+-1),E
;   87		d -= i;
.LINE 87

	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+6),BC
	LD	(IX+9),A
;   88		if (d < 0.5)
.LINE 88

	LD	HL,BC
	LD	E,(IX+9)
	LD	BC,0
	LD	A,63
	CALL	__fcmp
	JP	P,L_21
;   89			return i;
.LINE 89

	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	JR	L_25
L_21:
;   90		if (d > 0.5)
.LINE 90

	OR	A,A
	SBC	HL,HL
	LD	E,63
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	P,L_23
;   91			return i + 1.0;
.LINE 91

	LD	HL,8388608
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fadd
	LD	E,A
	LD	HL,BC
	JR	L_25
L_23:
;   92		if (IsEven(i))
.LINE 92

	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_IsEven
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_24
;   93			return i;
.LINE 93

	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	JR	L_25
L_24:
;   94		return i + 1.0;
.LINE 94

	LD	HL,8388608
	LD	E,63
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fadd
	LD	E,A
	LD	HL,BC
;   95	}
L_25:
.LINE 95

	LD	SP,IX
	POP	IX
	RET	


;**************************** _RoundIEEE754 ***************************
;Name                         Addr/Register   Size   Type
;_IsEven                             IMPORT  -----   function
;_floor                              IMPORT  -----   function
;i                                     IX-4      4   variable
;d                                     IX+6      4   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "RoundIEEE754",95,"_RoundIEEE754"
;   96	
;   97	
;   98	
;   99	void Zero(char* ptr, int c)
;  100	{
_Zero:
.DEFINE "_Zero"

.VALUE _Zero

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "Zero",100,"_Zero"

.LINE 100

.DEFINE "ptr"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "c"

.CLASS 65

.VALUE 9

.TYPE 4

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  101		int i = 0;
.LINE 101

	LD	BC,0
	LD	(IX+-3),BC
;  102		for (; i < c; i++)
.LINE 102

	JR	L_29
L_27:
;  103		{
;  104			ptr[i] = (char) NULL;
.LINE 104

	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  105		}
L_29:
.LINE 105

	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_27
;  106	
;  107	}
.LINE 107

	LD	SP,IX
	POP	IX
	RET	


;**************************** _Zero ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;c                                     IX+9      3   parameter
;ptr                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "Zero",107,"_Zero"
	XREF _g_X:ROM
	XREF _strlen:ROM
	XREF _strchr:ROM
	XREF _memmove:ROM
	XREF _memcpy:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _sprintf:ROM
	XREF _free:ROM
	XREF _modf:ROM
	XREF _floor:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _Zero
	XDEF _RoundIEEE754
	XDEF _IsEven
	XDEF _StrCut
	XDEF _IndexOf
	XDEF _Prepend
	XDEF _Substring
	XDEF _EchoInput
	XDEF _sys_GarbageCollect
	XDEF _g_inputBuffer
	XDEF _g_response
	END
