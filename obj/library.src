; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\LIBRARY.C"
	.assume ADL=1
	SEGMENT CODE
_prepend:
	LD	HL,-6
	CALL	__frameset
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-6),HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	INC	HL
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_2
L_0:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_2:
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _prepend ***************************
;Name                         Addr/Register   Size   Type
;_memmove                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;len                                   IX-6      3   variable
;i                                     IX-3      3   variable
;t                                     IX+9      3   parameter
;s                                     IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_indexOf:
	LD	HL,-6
	CALL	__frameset
	LD	A,(IX+9)
	SEXT	HL
	LD	L,(IX+9)
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strchr
	POP	BC
	POP	BC
	LD	(IX+-6),HL
	LD	BC,(IX+6)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _indexOf ***************************
;Name                         Addr/Register   Size   Type
;_strchr                             IMPORT  -----   function
;ptr                                   IX-6      3   variable
;index                                 IX-3      3   variable
;find                                  IX+9      1   parameter
;values                                IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_intToChar:
	CALL	__frameset0
	LD	A,(IX+6)
	ADD	A,48
	LD	SP,IX
	POP	IX
	RET	


;**************************** _intToChar ***************************
;Name                         Addr/Register   Size   Type
;c                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_str_cut:
	LD	HL,-6
	CALL	__frameset
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-3),HL
	LD	HL,(IX+12)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_8
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_8:
	LD	BC,(IX+12)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_9
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_9:
	LD	BC,(IX+9)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	INC	HL
	PUSH	HL
	LD	BC,(IX+12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
	LD	HL,(IX+12)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _str_cut ***************************
;Name                         Addr/Register   Size   Type
;_memmove                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;l                                     IX-3      3   variable
;len                                  IX+12      3   parameter
;begin                                 IX+9      3   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


_FloatToString:
	LD	HL,-10
	CALL	__frameset
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__ftol
	PUSH	BC
	LD	BC,L__8
	PUSH	BC
	PEA	IX+-10
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_str_cut
	POP	BC
	POP	BC
	POP	BC
	PEA	IX+-10
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_prepend
	POP	BC
	POP	BC
;    1	/* Keep these headers */
;    2	
;    3	#include <math.h>
;    4	#include "C:\CEdev\include\stddef.h"
;    5	#include "C:\CEdev\include\stdbool.h"
;    6	#include "C:\CEdev\include\tice.h"
;    7	#include "C:\CEdev\include\fileioc.h"
;    8	#include "C:\CEdev\include\stdint.h"
;    9	#include "../../../../../CEdev/include/tice.h"
;   10	#include "library.h"
;   11	#include <string.h>
;   12	#include <stdio.h>
;   13	/* Make sure to adjust those sizes according to your usage! */
;   14	#define INPUT_SIZE  10
;   15	#define RESP_SIZE   20
;   16	
;   17	/* Draw text on the homescreen at the given X/Y location */
;   18	void print(const char* text, uint8_t xpos, uint8_t ypos)
;   19	{
;   20		os_SetCursorPos(ypos, xpos);
;   21		os_PutStrFull(text);
;   22	}
;   23	
;   24	bool IsPrime(int24_t number)
;   25	{
;   26		int24_t i;
;   27		if (number == 1)
;   28		{
;   29			return false;
;   30		}
;   31	
;   32		for (i = 2; i < number; i++)
;   33		{
;   34			if (number % i == 0 && i != number) return false;
;   35		}
;   36		return true;
;   37	}
;   38	
;   39	int24_t HighestOneBit(int24_t num)
;   40	{
;   41		int24_t ret;
;   42		if (!num)
;   43		{
;   44			return 0;
;   45		}
;   46	
;   47		ret = 1;
;   48	
;   49		while (num >>= 1)
;   50		{
;   51			ret <<= 1;
;   52		}
;   53	
;   54		return ret;
;   55	}
;   56	
;   57	/**
;   58	 *
;   59	 * @param n the number of people standing in the circle
;   60	 * @return the safe position who will survive the execution
;   61	 *   f(N) = 2L + 1 where N =2^M + L and 0 <= L < 2^M
;   62	 */
;   63	int24_t getSafePosition(int24_t n)
;   64	{
;   65		// find value of L for the equation
;   66		int24_t valueOfL     = n - HighestOneBit(n);
;   67		int24_t safePosition = 2 * valueOfL + 1;
;   68	
;   69		return safePosition;
;   70	}
;   71	
;   72	/**
;   73	 * THESE MUST BE GLOBAL OR ELSE EXITING
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FloatToString ***************************
;Name                         Addr/Register   Size   Type
;_sprintf                            IMPORT  -----   function
;temp                                 IX-10     10   variable
;out                                  IX+12      3   parameter
;f                                     IX+6      4   parameter


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__7:
	DB	"%g"
	DB	0
L__8:
	DB	"%d"
	DB	0
	SEGMENT CODE
_print:
	CALL	__frameset0
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _print ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;ypos                                 IX+12      1   parameter
;xpos                                  IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_IsPrime:
	LD	HL,-3
	CALL	__frameset
	LD	BC,1
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_20
	XOR	A,A
	JR	L_22
L_20:
	LD	BC,2
	LD	(IX+-3),BC
	JR	L_19
L_17:
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_18
	LD	BC,(IX+6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_18
	XOR	A,A
	JR	L_22
L_18:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_19:
	LD	BC,(IX+6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_17
	LD	A,1
L_22:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _IsPrime ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;number                                IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_HighestOneBit:
	LD	HL,-3
	CALL	__frameset
	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_24
	OR	A,A
	SBC	HL,HL
	JR	L_28
L_24:
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_25
L_26:
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	(IX+-3),HL
L_25:
	LD	HL,(IX+6)
	LD	A,1
	CALL	__ishrs_b
	LD	(IX+6),HL
	CALL	__icmpzero
	JR	NZ,L_26
	LD	HL,(IX+-3)
L_28:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HighestOneBit ***************************
;Name                         Addr/Register   Size   Type
;ret                                   IX-3      3   variable
;num                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_getSafePosition:
	LD	HL,-6
	CALL	__frameset
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_HighestOneBit
	POP	BC
	LD	BC,HL
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
	ADD	HL,HL
	INC	HL
	LD	(IX+-6),HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getSafePosition ***************************
;Name                         Addr/Register   Size   Type
;safePosition                          IX-6      3   variable
;valueOfL                              IX-3      3   variable
;n                                     IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT BSS
_g_response:
	DS	20
_g_inputBuffer:
	DS	10
_g_value:
	DS	3
;   74	 * THE ENTRY POINT WILL CAUSE AN NMI RESET
;   75	 */
;   76	char    g_response[RESP_SIZE];
;   77	char    g_inputBuffer[INPUT_SIZE];
;   78	int24_t g_value;
	SEGMENT CODE
;   79	
;   80	int24_t os_GetNumberInput(const char* prompt)
;   81	{
_os_GetNumberInput:
	CALL	__frameset0
;   82		/* Ask the user to type a string, which gets stored in inputBuf */
;   83		os_GetStringInput(prompt, g_inputBuffer, INPUT_SIZE);
	LD	BC,10
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
;   84		return atoi(g_inputBuffer);
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_atoi
	POP	BC
;   85	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _os_GetNumberInput ***************************
;Name                         Addr/Register   Size   Type
;_atoi                               IMPORT  -----   function
;_g_inputBuffer                      STATIC     10   variable
;_os_GetStringInput                  IMPORT  -----   function
;prompt                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   86	
;   87	
;   88	
;   89	float os_GetNumberInputF(const char* prompt)
;   90	{
_os_GetNumberInputF:
	CALL	__frameset0
;   91		/* Ask the user to type a string, which gets stored in inputBuf */
;   92		os_GetStringInput(prompt, g_inputBuffer, INPUT_SIZE);
	LD	BC,10
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
;   93	
;   94		// Prints okay, but why won't atof work?!
;   95		g_inputBuffer[indexOf(g_inputBuffer,':')] = '.';
	LD	BC,58
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_indexOf
	POP	BC
	POP	BC
;   96		print(g_inputBuffer, 0,1);
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	ADD	HL,BC
	LD	(HL),46
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;   97	
;   98	
;   99	
;  100		return atof(g_inputBuffer);
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_atof
	POP	BC
;  101	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _os_GetNumberInputF ***************************
;Name                         Addr/Register   Size   Type
;_atof                               IMPORT  -----   function
;_g_inputBuffer                      STATIC     10   variable
;_os_GetStringInput                  IMPORT  -----   function
;prompt                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;  102	
;  103	#include <math.h>
;  104	
;  105	float FindRoot(float d)
;  106	{
_FindRoot:
	LD	HL,-4
	CALL	__frameset
;  107		char out[10];
;  108		float step;
;  109		step = 0.1;
	LD	BC,13421773
	LD	(IX+-4),BC
	LD	A,61
	LD	(IX+-1),A
;  110	
;  111		while (sqrt(step) != d)
	JR	L_33
L_34:
;  112		{
;  113			step += 0.1;
	LD	HL,13421773
	LD	E,61
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  114			if (sqrt(step) > d)
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sqrt
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fcmp
	JP	P,L_33
;  115				return -1;
	LD	HL,8388608
	LD	E,191
	JR	L_36
;  116		}
L_33:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sqrt
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JR	NZ,L_34
;  117		return step;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
;  118	}
L_36:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FindRoot ***************************
;Name                         Addr/Register   Size   Type
;_sqrt                               IMPORT  -----   function
;step                                  IX-4      4   variable
;d                                     IX+6      4   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;  119	
;  120	
;  121	/**
;  122	 * NOTES
;  123	 * - Variables must be declared at the first lines of the current scope
;  124	 * - All branching statements must use braces, whether or not the inner scope is only one line in length
;  125	 * TODO
;  126	 * - Figure out why I need my fields to be global
;  127	 * - Integers seem to need to be int24_t or any other fixed-size type, rather than keywords such as int or short
;  128	 * - Strings seem to need to be const char*
;  129	 */
;  130	
;  131	void clear(char* buf, int size) {
_clear:
	LD	HL,-3
	CALL	__frameset
;  132		int i;
;  133		i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  134		while (i < size) {
	JR	L_38
L_39:
;  135			buf[i] = 0;
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(HL),0
;  136			i++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  137		}
L_38:
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_39
;  138	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _clear ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;size                                  IX+9      3   parameter
;buf                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;  139	
;  140	
;  141	void main(void) // NOLINT
;  142	{
_main:
	LD	HL,-4
	CALL	__frameset
;  143		float x;
;  144		/* Clear the homescreen */
;  145		os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  146	
;  147	
;  148		os_GetStringInput("Enter a string ", g_inputBuffer, INPUT_SIZE);
	LD	BC,10
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	LD	BC,L__27
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
;  149		sprintf(g_response, "Echo: %s", g_inputBuffer);
	LD	BC,_g_inputBuffer
	PUSH	BC
	LD	BC,L__28
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  150		print(g_response, 0,2);
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  151	
;  152		while (!os_GetCSC());
L_45:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_45
;  153	
;  154		g_value = os_GetNumberInput("Enter an int ");
	LD	BC,L__30
	PUSH	BC
	CALL	_os_GetNumberInput
	POP	BC
	LD	(_g_value),HL
;  155		sprintf(g_response, "Echo: %d", g_value);
	LD	BC,(_g_value)
	PUSH	BC
	LD	BC,L__31
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  156		print(g_response,0,2);
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  157	
;  158		while (!os_GetCSC());
L_48:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_48
;  159	
;  160		// sqrt(2) = 1.414213562
;  161	
;  162		x = os_GetNumberInputF("Enter a float ");
	LD	BC,L__33
	PUSH	BC
	CALL	_os_GetNumberInputF
	POP	BC
	LD	(IX+-4),HL
	LD	(IX+-1),E
;  163		sprintf(g_response, "Echo: %e", x);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,L__34
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  164		print(g_response,0,2);
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  165	
;  166		while (!os_GetCSC());
L_51:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_51
;  167	
;  168		clear(g_inputBuffer, INPUT_SIZE);
	LD	BC,10
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_clear
	POP	BC
	POP	BC
;  169		clear(g_response, RESP_SIZE);
	LD	BC,20
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_clear
	POP	BC
	POP	BC
;  170	
;  171		os_GetStringInput("Try again ", g_inputBuffer, INPUT_SIZE);
	LD	BC,10
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	LD	BC,L__36
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
;  172		g_inputBuffer[indexOf(g_inputBuffer, ':')] = '.';
	LD	BC,58
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_indexOf
	POP	BC
	POP	BC
;  173		print(g_inputBuffer, 0,1);
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	ADD	HL,BC
	LD	(HL),46
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  174		x = (float) atof(g_inputBuffer);
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_atof
	POP	BC
	LD	(IX+-4),HL
	LD	(IX+-1),E
;  175		if (x == 3.14)
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,4781507
	LD	A,64
	CALL	__fcmp
	JR	NZ,L_54
;  176		{
;  177			print("ok",0,3);
	LD	BC,3
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,L__38
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  178		}
L_54:
;  179		sprintf(g_inputBuffer, "%g", x);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,L__39
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  180		print(g_inputBuffer,0,2);
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  181	
;  182		//sprintf(g_response, "Echo: %s | %d | %c", g_inputBuffer, (unsigned int)*g_inputBuffer, (unsigned char) *g_inputBuffer);
;  183		//g_value = os_GetNumberInput("N? ");
;  184	
;  185		/* Build the user response */
;  186		//sprintf(g_response, "N: %d | JOSEPHUS: %d | PRIME: %s", g_value, getSafePosition((int24_t)g_value), IsPrime((int24_t)g_value) ? "YES" : "NO");
;  187	
;  188	
;  189		/* Clear the homescreen and display the built response */
;  190		//os_ClrHome();
;  191		//print(g_response, 0, 0);
;  192	
;  193		/* Wait for a key press before quitting */
;  194		while (!os_GetCSC());
L_56:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_56
;  195	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_atof                               IMPORT  -----   function
;_g_value                            STATIC      3   variable
;_os_GetCSC                          IMPORT  -----   function
;_g_response                         STATIC     20   variable
;_sprintf                            IMPORT  -----   function
;_g_inputBuffer                      STATIC     10   variable
;_os_GetStringInput                  IMPORT  -----   function
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;x                                     IX-4      4   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__27:
	DB	"Enter a string "
	DB	0
L__28:
	DB	"Echo: %s"
	DB	0
L__30:
	DB	"Enter an int "
	DB	0
L__31:
	DB	"Echo: %d"
	DB	0
L__33:
	DB	"Enter a float "
	DB	0
L__34:
	DB	"Echo: %e"
	DB	0
L__36:
	DB	"Try again "
	DB	0
L__38:
	DB	"ok"
	DB	0
L__39:
	DB	"%g"
	DB	0
	XREF _strlen:ROM
	XREF _strchr:ROM
	XREF _memmove:ROM
	XREF _sprintf:ROM
	XREF _atoi:ROM
	XREF _atof:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetCSC:ROM
	XREF _os_GetStringInput:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF _sqrt:ROM
	XREF __irems:ROM
	XREF __fadd:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __ishrs_b:ROM
	XDEF _main
	XDEF _clear
	XDEF _FindRoot
	XDEF _os_GetNumberInputF
	XDEF _os_GetNumberInput
	XDEF _g_value
	XDEF _g_inputBuffer
	XDEF _g_response
	XDEF _getSafePosition
	XDEF _HighestOneBit
	XDEF _IsPrime
	XDEF _print
	XDEF _FloatToString
	XDEF _str_cut
	XDEF _intToChar
	XDEF _indexOf
	XDEF _prepend
	END
