; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\LIBRARY.C"
	.assume ADL=1
	SEGMENT BSS
_g_response:
	DS	20
_g_inputBuffer:
	DS	10
;    1	/* Keep these headers */
;    2	
;    3	#include <math.h>
;    4	#include "C:\CEdev\include\stddef.h"
;    5	#include "C:\CEdev\include\stdbool.h"
;    6	#include "C:\CEdev\include\fileioc.h"
;    7	#include "Library.h"
;    8	#include "IO.h"
;    9	
;   10	
;   11	/**
;   12	 * THESE MUST BE GLOBAL OR ELSE EXITING
;   13	 * THE ENTRY POINT WILL CAUSE AN NMI RESET
;   14	 */
;   15	char g_response[RESP_SIZE];
;   16	char g_inputBuffer[INPUT_SIZE];
	SEGMENT CODE
;   17	
;   18	void sys_GarbageCollect()
;   19	{
_sys_GarbageCollect:
;   20		dbg_sprintf(dbgout, "[DECIMATH] Freeing pointers\n");
;   21		if (g_X)
	LD	HL,(_g_X)
	CALL	__icmpzero
	JR	Z,L_7
;   22			free(g_X);
	LD	BC,(_g_X)
	PUSH	BC
	CALL	_free
	POP	BC
;   23		dbg_sprintf(dbgout, "[DECIMATH] Unloaded\n");
L_7:
;   24		os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;   25	}
	RET	


;**************************** _sys_GarbageCollect ***************************
;Name                         Addr/Register   Size   Type
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;_free                               IMPORT  -----   function
;_g_X                                IMPORT      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   26	
;   27	void Substring(char* in, int index, int len, char* out)
;   28	{
_Substring:
	CALL	__frameset0
;   29	
;   30		memcpy(out, &in[index], len + 1);
	LD	BC,(IX+12)
	INC	BC
	PUSH	BC
	LD	BC,(IX+9)
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+15)
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;   31		out[len] = '\0';
	LD	BC,(IX+12)
	LD	HL,(IX+15)
	ADD	HL,BC
	LD	(HL),0
;   32	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Substring ***************************
;Name                         Addr/Register   Size   Type
;_memcpy                             IMPORT  -----   function
;out                                  IX+15      3   parameter
;len                                  IX+12      3   parameter
;index                                 IX+9      3   parameter
;in                                    IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;   33	
;   34	void Prepend(char* s, const char* t)
;   35	{
_Prepend:
	LD	HL,-6
	CALL	__frameset
;   36		size_t len = strlen(t);
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-6),HL
;   37		size_t i;
;   38	
;   39		memmove(s + len, s, strlen(s) + 1);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	INC	HL
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
;   40	
;   41		for (i = 0; i < len; ++i)
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_12
L_10:
;   42		{
;   43			s[i] = t[i];
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;   44		}
L_12:
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_10
;   45	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _Prepend ***************************
;Name                         Addr/Register   Size   Type
;_memmove                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;len                                   IX-6      3   variable
;i                                     IX-3      3   variable
;t                                     IX+9      3   parameter
;s                                     IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;   46	
;   47	/*int IndexOf(char* values, char find)
;   48	{
;   49		int index;
;   50		const char* ptr = strchr(values, find);
;   51		if (ptr)
;   52		{
;   53			index = (int) (ptr - values);
;   54		}
;   55		else index = -1;
;   56		return index;
;   57	}*/
;   58	
;   59	int StrCut(char* str, int begin, int len)
;   60	{
_StrCut:
	LD	HL,-6
	CALL	__frameset
;   61		int l = strlen(str);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-3),HL
;   62	
;   63		if (len < 0) len         = l - begin;
	LD	HL,(IX+12)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_16
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_16:
;   64		if (begin + len > l) len = l - begin;
	LD	BC,(IX+12)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_17
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_17:
;   65		memmove(str + begin, str + begin + len, l - len + 1);
	LD	BC,(IX+9)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	INC	HL
	PUSH	HL
	LD	BC,(IX+12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
;   66	
;   67		return len;
	LD	HL,(IX+12)
;   68	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _StrCut ***************************
;Name                         Addr/Register   Size   Type
;_memmove                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;l                                     IX-3      3   variable
;len                                  IX+12      3   parameter
;begin                                 IX+9      3   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


;   69	
;   70	int IsEven(double d)
;   71	{
_IsEven:
	LD	HL,-4
	CALL	__frameset
;   72		double int_part;
;   73		modf(d / 2.0, &int_part);
	PEA	IX+-4
	LD	BC,(IX+6)
	LD	A,(IX+9)
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fdiv
	LD	DE,BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PUSH	DE
	CALL	_modf
	POP	BC
	POP	BC
	POP	BC
;   74		return 2.0 * int_part == d;
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	OR	A,A
	SBC	HL,HL
	LD	E,64
	CALL	__fmul
	LD	E,A
	LD	HL,BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JR	NZ,L__9
	LD	B,1
	JR	L__10
L__9:
	LD	B,0
L__10:
	LD	A,B
	SEXT	HL
	LD	L,B
;   75	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _IsEven ***************************
;Name                         Addr/Register   Size   Type
;_modf                               IMPORT  -----   function
;int_part                              IX-4      4   variable
;d                                     IX+6      4   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;   76	
;   77	double RoundIEEE754(double d)
;   78	{
_RoundIEEE754:
	LD	HL,-4
	CALL	__frameset
;   79		double i = floor(d);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_floor
	POP	BC
	POP	BC
	LD	(IX+-4),HL
	LD	(IX+-1),E
;   80		d -= i;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fsub
	LD	(IX+6),BC
	LD	(IX+9),A
;   81		if (d < 0.5)
	LD	HL,BC
	LD	BC,0
	LD	E,(IX+9)
	LD	A,63
	CALL	__fcmp
	JP	P,L_22
;   82			return i;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	JR	L_26
L_22:
	OR	A,A
;   83		if (d > 0.5)
	SBC	HL,HL
	LD	E,63
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JP	P,L_24
;   84			return i + 1.0;
	LD	HL,8388608
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fadd
	LD	E,A
	LD	HL,BC
	JR	L_26
L_24:
;   85		if (IsEven(i))
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_IsEven
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	Z,L_25
;   86			return i;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	JR	L_26
L_25:
;   87		return i + 1.0;
	LD	HL,8388608
	LD	E,63
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fadd
	LD	E,A
	LD	HL,BC
;   88	}
L_26:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _RoundIEEE754 ***************************
;Name                         Addr/Register   Size   Type
;_IsEven                             IMPORT  -----   function
;_floor                              IMPORT  -----   function
;i                                     IX-4      4   variable
;d                                     IX+6      4   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;   89	
;   90	bool os_RadiansMode()
;   91	{
_os_RadiansMode:
	LD	HL,-54
	CALL	__frameset
;   92		const real_t real90 = os_Int24ToReal(90);
	LD	BC,90
	PUSH	BC
	PEA	IX+-36
	CALL	_os_Int24ToReal
	POP	BC
	POP	BC
	LEA	DE,IX+-9
;   93		const real_t real1  = os_Int24ToReal(1);
	LD	BC,1
	PUSH	BC
	PEA	IX+-45
	LD	BC,9
	LDIR	
	CALL	_os_Int24ToReal
	POP	BC
	POP	BC
	LEA	DE,IX+-18
;   94		real_t       buf    = os_RealSinRad(&real90);
	PEA	IX+-9
	PEA	IX+-54
	LD	BC,9
	LDIR	
	CALL	_os_RealSinRad
	POP	BC
	POP	BC
	LEA	DE,IX+-27
;   95		if (os_RealCompare(&buf, &real1) == 0)
	PEA	IX+-18
	PEA	IX+-27
	LD	BC,9
	LDIR	
	CALL	_os_RealCompare
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_28
;   96		{
;   97			//dbg_sprintf(dbgout, "[DECIMATH] [Info] Degrees mode\n");
;   98			return false;
	XOR	A,A
	JR	L_29
;   99		}
;  100		else
L_28:
;  101		{
;  102			//dbg_sprintf(dbgout, "[DECIMATH] [Info] Radians mode\n");
;  103			return true;
	LD	A,1
;  104		}
;  105	}
L_29:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _os_RadiansMode ***************************
;Name                         Addr/Register   Size   Type
;_os_RealCompare                     IMPORT  -----   function
;_os_RealSinRad                      IMPORT  -----   function
;_os_Int24ToReal                     IMPORT  -----   function
;buf                                  IX-27      9   variable
;real1                                IX-18      9   variable
;real90                                IX-9      9   variable


; Stack Frame Size: 60 (bytes)
;       Spill Code: 0 (instruction)


;  106	
;  107	void mem_Zero(char* ptr, int c)
;  108	{
_mem_Zero:
	LD	HL,-3
	CALL	__frameset
;  109		int i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  110		dbg_sprintf(dbgout, "[dbg] [mem_Zero] Zeroing memory from 0x%p to 0x%p\n", (void*) ptr, &ptr + c);
	JR	L_34
;  111		for (; i < c; i++)
L_32:
;  112		{
;  113			ptr[i] = (char) NULL;
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  114		}
L_34:
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_32
;  115	
;  116	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mem_Zero ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;c                                     IX+9      3   parameter
;ptr                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	XREF _g_X:ROM
	XREF _strlen:ROM
	XREF _memmove:ROM
	XREF _memcpy:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_Int24ToReal:ROM
	XREF _os_RealCompare:ROM
	XREF _os_RealSinRad:ROM
	XREF _free:ROM
	XREF _modf:ROM
	XREF _floor:ROM
	XREF __fadd:ROM
	XREF __fsub:ROM
	XREF __fmul:ROM
	XREF __fdiv:ROM
	XREF __fcmp:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _mem_Zero
	XDEF _os_RadiansMode
	XDEF _RoundIEEE754
	XDEF _IsEven
	XDEF _StrCut
	XDEF _Prepend
	XDEF _Substring
	XDEF _sys_GarbageCollect
	XDEF _g_inputBuffer
	XDEF _g_response
	END
