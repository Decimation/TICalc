; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\SRC\LIBRARY.C"
	.assume ADL=1
	SEGMENT CODE
_prepend:
	LD	HL,-6
	CALL	__frameset
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-6),HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	INC	HL
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IX+-6)
	LD	HL,(IX+6)
	ADD	HL,BC
	PUSH	HL
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_2
L_0:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_2:
	LD	BC,(IX+-6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _prepend ***************************
;Name                         Addr/Register   Size   Type
;_memmove                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;len                                   IX-6      3   variable
;i                                     IX-3      3   variable
;t                                     IX+9      3   parameter
;s                                     IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_indexOf:
	LD	HL,-6
	CALL	__frameset
	LD	A,(IX+9)
	SEXT	HL
	LD	L,(IX+9)
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strchr
	POP	BC
	POP	BC
	LD	(IX+-6),HL
	LD	BC,(IX+6)
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _indexOf ***************************
;Name                         Addr/Register   Size   Type
;_strchr                             IMPORT  -----   function
;ptr                                   IX-6      3   variable
;index                                 IX-3      3   variable
;find                                  IX+9      1   parameter
;values                                IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_intToChar:
	CALL	__frameset0
	LD	A,(IX+6)
	ADD	A,48
	LD	SP,IX
	POP	IX
	RET	


;**************************** _intToChar ***************************
;Name                         Addr/Register   Size   Type
;c                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_GetMantissa:
	LD	HL,-43
	CALL	__frameset
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	PEA	IX+-23
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_9
L_7:
	LD	BC,46
	PUSH	BC
	PEA	IX+-23
	CALL	_indexOf
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-23
	ADD	HL,BC
	LD	A,(HL)
	LEA	HL,IX+-43
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_9:
	LD	BC,46
	PUSH	BC
	PEA	IX+-23
	CALL	_indexOf
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	HL
	ADD	HL,BC
	LD	BC,HL
	LEA	HL,IX+-23
	ADD	HL,BC
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_7
	PEA	IX+-43
	CALL	_atoi
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _GetMantissa ***************************
;Name                         Addr/Register   Size   Type
;_atoi                               IMPORT  -----   function
;_sprintf                            IMPORT  -----   function
;mstr                                 IX-43     20   variable
;fstr                                 IX-23     20   variable
;i                                     IX-3      3   variable
;f                                     IX+6      4   parameter


; Stack Frame Size: 55 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__4:
	DB	"%f"
	DB	0
	SEGMENT CODE
_str_cut:
	LD	HL,-6
	CALL	__frameset
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	(IX+-3),HL
	LD	HL,(IX+12)
	CALL	__icmpzero
	JP	P,L_14
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_14:
	LD	BC,(IX+12)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_15
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+12),HL
L_15:
	LD	BC,(IX+9)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	INC	HL
	PUSH	HL
	LD	BC,(IX+12)
	LD	HL,(IX+-6)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
	LD	HL,(IX+12)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _str_cut ***************************
;Name                         Addr/Register   Size   Type
;_memmove                            IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;l                                     IX-3      3   variable
;len                                  IX+12      3   parameter
;begin                                 IX+9      3   parameter
;str                                   IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


_FloatToString:
	LD	HL,-10
	CALL	__frameset
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,L__10
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__ftol
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	PEA	IX+-10
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__ftol
	PUSH	BC
	CALL	_intToChar
	POP	BC
	LD	C,A
	LD	B,0
	PUSH	BC
	PEA	IX+-10
	CALL	_indexOf
	POP	BC
	POP	BC
	LD	BC,HL
	LEA	HL,IX+-10
	PEA	IX+-10
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+12)
	PUSH	BC
	CALL	_prepend
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FloatToString ***************************
;Name                         Addr/Register   Size   Type
;_sprintf                            IMPORT  -----   function
;temp                                 IX-10     10   variable
;out                                  IX+12      3   parameter
;f                                     IX+6      4   parameter


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__10:
	DB	"%f"
	DB	0
L__11:
	DB	"%d"
	DB	0
	SEGMENT CODE
_StringToFloat:
	CALL	__frameset0
	LD	BC,58
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_indexOf
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	(HL),46
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_atof
	POP	BC
;    1	/* Keep these headers */
;    2	
;    3	#include <math.h>
;    4	#include "C:\CEdev\include\stddef.h"
;    5	#include "C:\CEdev\include\stdbool.h"
;    6	#include "C:\CEdev\include\tice.h"
;    7	#include "C:\CEdev\include\fileioc.h"
;    8	#include "C:\CEdev\include\stdint.h"
;    9	#include "library.h"
;   10	#include <string.h>
;   11	#include <stdio.h>
;   12	/* Make sure to adjust those sizes according to your usage! */
;   13	#define INPUT_SIZE  10
;   14	#define RESP_SIZE   20
;   15	
;   16	/* Draw text on the homescreen at the given X/Y location */
;   17	void print(const char* text, uint8_t xpos, uint8_t ypos)
;   18	{
;   19		os_SetCursorPos(ypos, xpos);
;   20		os_PutStrFull(text);
;   21	}
;   22	
;   23	bool IsPrime(int24_t number)
;   24	{
;   25		int24_t i;
;   26		if (number == 1)
;   27		{
;   28			return false;
;   29		}
;   30	
;   31		for (i = 2; i < number; i++)
;   32		{
;   33			if (number % i == 0 && i != number) return false;
;   34		}
;   35		return true;
;   36	}
;   37	
;   38	int24_t HighestOneBit(int24_t num)
;   39	{
;   40		int24_t ret;
;   41		if (!num)
;   42		{
;   43			return 0;
;   44		}
;   45	
;   46		ret = 1;
;   47	
;   48		while (num >>= 1)
;   49		{
;   50			ret <<= 1;
;   51		}
;   52	
;   53		return ret;
;   54	}
;   55	
;   56	/**
;   57	 *
;   58	 * @param n the number of people standing in the circle
;   59	 * @return the safe position who will survive the execution
;   60	 *   f(N) = 2L + 1 where N =2^M + L and 0 <= L < 2^M
;   61	 */
;   62	int24_t getSafePosition(int24_t n)
;   63	{
;   64		// find value of L for the equation
;   65		int24_t valueOfL     = n - HighestOneBit(n);
;   66		int24_t safePosition = 2 * valueOfL + 1;
;   67	
;   68		return safePosition;
;   69	}
;   70	
;   71	/**
;   72	 * THESE MUST BE GLOBAL OR ELSE EXITING
;   73	 * THE ENTRY POINT WILL CAUSE AN NMI RESET
;   74	 */
;   75	char    g_response[RESP_SIZE];
;   76	char    g_inputBuffer[INPUT_SIZE];
;   77	int24_t g_value;
;   78	
;   79	int24_t os_GetNumberInput(const char* prompt)
;   80	{
;   81		/* Ask the user to type a string, which gets stored in inputBuf */
;   82		os_GetStringInput(prompt, g_inputBuffer, INPUT_SIZE);
;   83		return atoi(g_inputBuffer);
;   84	}
;   85	
;   86	/**
;   87	 * Floats read-in will still be read properly within C but will not
;   88	 * print out properly for whatever fucking reason
;   89	 * @param prompt
;   90	 * @return
;   91	 */
;   92	float os_GetFloatInput(const char* prompt)
;   93	{
;   94		/* Ask the user to type a string, which gets stored in inputBuf */
;   95		os_GetStringInput(prompt, g_inputBuffer, INPUT_SIZE);
;   96	
;   97		return StringToFloat(g_inputBuffer);
;   98	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _StringToFloat ***************************
;Name                         Addr/Register   Size   Type
;_atof                               IMPORT  -----   function
;in                                    IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_print:
	CALL	__frameset0
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	CALL	_os_SetCursorPos
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_PutStrFull
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _print ***************************
;Name                         Addr/Register   Size   Type
;_os_PutStrFull                      IMPORT  -----   function
;_os_SetCursorPos                    IMPORT  -----   function
;ypos                                 IX+12      1   parameter
;xpos                                  IX+9      1   parameter
;text                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_IsPrime:
	LD	HL,-3
	CALL	__frameset
	LD	BC,1
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_27
	XOR	A,A
	JR	L_29
L_27:
	LD	BC,2
	LD	(IX+-3),BC
	JR	L_26
L_24:
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_25
	LD	BC,(IX+6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_25
	XOR	A,A
	JR	L_29
L_25:
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_26:
	LD	BC,(IX+6)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_24
	LD	A,1
L_29:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _IsPrime ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;number                                IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_HighestOneBit:
	LD	HL,-3
	CALL	__frameset
	LD	HL,(IX+6)
	CALL	__icmpzero
	JR	NZ,L_31
	OR	A,A
	SBC	HL,HL
	JR	L_35
L_31:
	LD	BC,1
	LD	(IX+-3),BC
	JR	L_32
L_33:
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	(IX+-3),HL
L_32:
	LD	HL,(IX+6)
	LD	A,1
	CALL	__ishrs_b
	LD	(IX+6),HL
	CALL	__icmpzero
	JR	NZ,L_33
	LD	HL,(IX+-3)
L_35:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _HighestOneBit ***************************
;Name                         Addr/Register   Size   Type
;ret                                   IX-3      3   variable
;num                                   IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_getSafePosition:
	LD	HL,-6
	CALL	__frameset
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_HighestOneBit
	POP	BC
	LD	BC,HL
	LD	HL,(IX+6)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
	ADD	HL,HL
	INC	HL
	LD	(IX+-6),HL
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getSafePosition ***************************
;Name                         Addr/Register   Size   Type
;safePosition                          IX-6      3   variable
;valueOfL                              IX-3      3   variable
;n                                     IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT BSS
_g_response:
	DS	20
_g_inputBuffer:
	DS	10
_g_value:
	DS	3
	SEGMENT CODE
_os_GetNumberInput:
	CALL	__frameset0
	LD	BC,10
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_atoi
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _os_GetNumberInput ***************************
;Name                         Addr/Register   Size   Type
;_atoi                               IMPORT  -----   function
;_g_inputBuffer                      STATIC     10   variable
;_os_GetStringInput                  IMPORT  -----   function
;prompt                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_os_GetFloatInput:
	CALL	__frameset0
	LD	BC,10
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	CALL	_StringToFloat
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _os_GetFloatInput ***************************
;Name                         Addr/Register   Size   Type
;_g_inputBuffer                      STATIC     10   variable
;_os_GetStringInput                  IMPORT  -----   function
;prompt                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   99	
;  100	#include <math.h>
;  101	
;  102	float FindRoot(float d)
;  103	{
_FindRoot:
	LD	HL,-4
	CALL	__frameset
;  104		char out[10];
;  105		float step;
;  106		step = 0.1;
	LD	BC,13421773
	LD	(IX+-4),BC
	LD	A,61
	LD	(IX+-1),A
;  107	
;  108		while (sqrt(step) != d)
	JR	L_40
L_41:
;  109		{
;  110			step += 0.1;
	LD	HL,13421773
	LD	E,61
	LD	BC,(IX+-4)
	LD	A,(IX+-1)
	CALL	__fadd
	LD	(IX+-4),BC
	LD	(IX+-1),A
;  111			if (sqrt(step) > d)
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sqrt
	POP	BC
	POP	BC
	LD	A,E
	LD	BC,HL
	LD	HL,(IX+6)
	LD	E,(IX+9)
	CALL	__fcmp
	JP	P,L_40
;  112				return -1;
	LD	HL,8388608
	LD	E,191
	JR	L_43
;  113		}
L_40:
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_sqrt
	POP	BC
	POP	BC
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__fcmp
	JR	NZ,L_41
;  114		return step;
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
;  115	}
L_43:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _FindRoot ***************************
;Name                         Addr/Register   Size   Type
;_sqrt                               IMPORT  -----   function
;step                                  IX-4      4   variable
;d                                     IX+6      4   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;  116	
;  117	
;  118	/**
;  119	 * NOTES
;  120	 * - Variables must be declared at the first lines of the current scope
;  121	 * - All branching statements must use braces, whether or not the inner scope is only one line in length
;  122	 * - The format specifiers %f, %g, and %e do not work for any printf-related functions
;  123	 * TODO
;  124	 * - Figure out why I need my fields to be global
;  125	 * - Integers seem to need to be int24_t or any other fixed-size type, rather than keywords such as int or short
;  126	 * - Strings seem to need to be const char*
;  127	 */
;  128	
;  129	void clear(char* buf, int size) {
_clear:
	LD	HL,-3
	CALL	__frameset
;  130		int i;
;  131		i = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  132		while (i < size) {
	JR	L_45
L_46:
;  133			buf[i] = 0;
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(HL),0
;  134			i++;
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
;  135		}
L_45:
	LD	BC,(IX+9)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_46
;  136	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _clear ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-3      3   variable
;size                                  IX+9      3   parameter
;buf                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;  137	
;  138	void printFloat(float f) {
_printFloat:
	LD	HL,-20
	CALL	__frameset
;  139		int ipart = (int) f;
;  140		float fpart = f - ipart;
;  141		char buf[20];
;  142	
;  143		sprintf(buf, "%d | %d",ipart, GetMantissa(f));
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_GetMantissa
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,(IX+6)
	LD	A,(IX+9)
	CALL	__ftol
	PUSH	BC
	LD	BC,L__31
	PUSH	BC
	PEA	IX+-20
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  144		print(buf,0,3);
	LD	BC,3
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PEA	IX+-20
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  145	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _printFloat ***************************
;Name                         Addr/Register   Size   Type
;_sprintf                            IMPORT  -----   function
;buf                                  IX-20     20   variable
;f                                     IX+6      4   parameter


; Stack Frame Size: 32 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__31:
	DB	"%d | %d"
	DB	0
	SEGMENT CODE
;  146	
;  147	void main(void) // NOLINT
;  148	{
_main:
	LD	HL,-4
	CALL	__frameset
;  149		float x;
;  150		/* Clear the homescreen */
;  151		os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;  152	
;  153	
;  154		os_GetStringInput("Enter a string ", g_inputBuffer, INPUT_SIZE);
	LD	BC,10
	PUSH	BC
	LD	BC,_g_inputBuffer
	PUSH	BC
	LD	BC,L__33
	PUSH	BC
	CALL	_os_GetStringInput
	POP	BC
	POP	BC
	POP	BC
;  155		sprintf(g_response, "Echo: %s", g_inputBuffer);
	LD	BC,_g_inputBuffer
	PUSH	BC
	LD	BC,L__34
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  156		print(g_response, 0,2);
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  157	
;  158		while (!os_GetCSC());
L_53:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_53
;  159	
;  160		g_value = os_GetNumberInput("Enter an int ");
	LD	BC,L__36
	PUSH	BC
	CALL	_os_GetNumberInput
	POP	BC
	LD	(_g_value),HL
;  161		sprintf(g_response, "Echo: %d", g_value);
	LD	BC,(_g_value)
	PUSH	BC
	LD	BC,L__37
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  162		print(g_response,0,2);
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  163	
;  164		while (!os_GetCSC());
L_56:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_56
;  165	
;  166		// sqrt(2) = 1.414213562
;  167	
;  168		x = os_GetFloatInput("Enter 3.14 ");
	LD	BC,L__39
	PUSH	BC
	CALL	_os_GetFloatInput
	POP	BC
	LD	(IX+-4),HL
	LD	(IX+-1),E
;  169		if (x == 3.14)
	LD	HL,(IX+-4)
	LD	E,(IX+-1)
	LD	BC,4781507
	LD	A,64
	CALL	__fcmp
	JR	NZ,L_59
;  170		{
;  171			print("OK", 0, 1);
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,L__41
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  172		}
L_59:
;  173	
;  174		sprintf(g_response, "= %f", x);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	LD	BC,L__42
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  175		print(g_response,0,2);
	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_g_response
	PUSH	BC
	CALL	_print
	POP	BC
	POP	BC
	POP	BC
;  176		printFloat(x);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_printFloat
	POP	BC
	POP	BC
;  177	
;  178	
;  179	
;  180	
;  181		while (!os_GetCSC());
L_61:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_61
;  182	
;  183		//sprintf(g_response, "Echo: %s | %d | %c", g_inputBuffer, (unsigned int)*g_inputBuffer, (unsigned char) *g_inputBuffer);
;  184		//g_value = os_GetNumberInput("N? ");
;  185	
;  186		/* Build the user response */
;  187		//sprintf(g_response, "N: %d | JOSEPHUS: %d | PRIME: %s", g_value, getSafePosition((int24_t)g_value), IsPrime((int24_t)g_value) ? "YES" : "NO");
;  188	
;  189	
;  190		/* Clear the homescreen and display the built response */
;  191		//os_ClrHome();
;  192		//print(g_response, 0, 0);
;  193	
;  194		/* Wait for a key press before quitting */
;  195		while (!os_GetCSC());
L_62:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_62
;  196	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_g_value                            STATIC      3   variable
;_os_GetCSC                          IMPORT  -----   function
;_g_response                         STATIC     20   variable
;_sprintf                            IMPORT  -----   function
;_g_inputBuffer                      STATIC     10   variable
;_os_GetStringInput                  IMPORT  -----   function
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;x                                     IX-4      4   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__33:
	DB	"Enter a string "
	DB	0
L__34:
	DB	"Echo: %s"
	DB	0
L__36:
	DB	"Enter an int "
	DB	0
L__37:
	DB	"Echo: %d"
	DB	0
L__39:
	DB	"Enter 3.14 "
	DB	0
L__41:
	DB	"OK"
	DB	0
L__42:
	DB	"= %f"
	DB	0
	XREF _strlen:ROM
	XREF _strchr:ROM
	XREF _memmove:ROM
	XREF _sprintf:ROM
	XREF _atoi:ROM
	XREF _atof:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _os_GetCSC:ROM
	XREF _os_GetStringInput:ROM
	XREF _os_PutStrFull:ROM
	XREF _os_SetCursorPos:ROM
	XREF _sqrt:ROM
	XREF __irems:ROM
	XREF __fadd:ROM
	XREF __fcmp:ROM
	XREF __ftol:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __ishrs_b:ROM
	XDEF _main
	XDEF _printFloat
	XDEF _clear
	XDEF _FindRoot
	XDEF _os_GetFloatInput
	XDEF _os_GetNumberInput
	XDEF _g_value
	XDEF _g_inputBuffer
	XDEF _g_response
	XDEF _getSafePosition
	XDEF _HighestOneBit
	XDEF _IsPrime
	XDEF _print
	XDEF _StringToFloat
	XDEF _FloatToString
	XDEF _str_cut
	XDEF _GetMantissa
	XDEF _intToChar
	XDEF _indexOf
	XDEF _prepend
	END
